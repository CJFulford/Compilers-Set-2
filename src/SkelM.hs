module SkelM where

-- Haskell module generated by the BNF converter

import AbsM
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transCID :: CID -> Result
transCID x = case x of
  CID string -> failure x
transID :: ID -> Result
transID x = case x of
  ID string -> failure x
transProg :: Prog -> Result
transProg x = case x of
  Prg block -> failure x
transBlock :: Block -> Result
transBlock x = case x of
  Blok declarations programbody -> failure x
transDeclarations :: Declarations -> Result
transDeclarations x = case x of
  Dec declaration declarations -> failure x
  DecN -> failure x
transDeclaration :: Declaration -> Result
transDeclaration x = case x of
  DecV vardeclaration -> failure x
  DecF fundeclaration -> failure x
  DecD datadeclaration -> failure x
transVar_declaration :: Var_declaration -> Result
transVar_declaration x = case x of
  VarD varspecs type_ -> failure x
transVar_specs :: Var_specs -> Result
transVar_specs x = case x of
  VarS varspec morevarspecs -> failure x
transMore_var_specs :: More_var_specs -> Result
transMore_var_specs x = case x of
  MVarS varspec morevarspecs -> failure x
  MVar -> failure x
transVar_spec :: Var_spec -> Result
transVar_spec x = case x of
  VarSp arraydimensions -> failure x
transArray_dimensions :: Array_dimensions -> Result
transArray_dimensions x = case x of
  ArrDi expr arraydimensions -> failure x
  ArrD -> failure x
transType :: Type -> Result
transType x = case x of
  TInt -> failure x
  TRea -> failure x
  TBoo -> failure x
  TCha -> failure x
  Tid id -> failure x
transFun_declaration :: Fun_declaration -> Result
transFun_declaration x = case x of
  FunD id paramlist type_ funblock -> failure x
transFun_block :: Fun_block -> Result
transFun_block x = case x of
  FunB declarations funbody -> failure x
transParam_list :: Param_list -> Result
transParam_list x = case x of
  ParL parameters -> failure x
transParameters :: Parameters -> Result
transParameters x = case x of
  Para basicdeclaration moreparameters -> failure x
  ParaN -> failure x
transMore_parameters :: More_parameters -> Result
transMore_parameters x = case x of
  MPar basicdeclaration moreparameters -> failure x
  MParN -> failure x
transBasic_declaration :: Basic_declaration -> Result
transBasic_declaration x = case x of
  BDec id basicarraydimensions type_ -> failure x
transBasic_array_dimensions :: Basic_array_dimensions -> Result
transBasic_array_dimensions x = case x of
  BArrD basicarraydimensions -> failure x
  BArrN -> failure x
transData_declaration :: Data_declaration -> Result
transData_declaration x = case x of
  DatDec id consdeclarations -> failure x
transCons_declarations :: Cons_declarations -> Result
transCons_declarations x = case x of
  ConDec consdecl moreconsdecl -> failure x
transMore_cons_decl :: More_cons_decl -> Result
transMore_cons_decl x = case x of
  MConDc consdecl moreconsdecl -> failure x
  MConNl -> failure x
transCons_decl :: Cons_decl -> Result
transCons_decl x = case x of
  CnDecl cid typelist -> failure x
  CnDec cid -> failure x
transType_list :: Type_list -> Result
transType_list x = case x of
  TpeLst type_ moretype -> failure x
transMore_type :: More_type -> Result
transMore_type x = case x of
  MreTyp type_ moretype -> failure x
  MrTypN -> failure x
transProgram_body :: Program_body -> Result
transProgram_body x = case x of
  PrgBdy progstmts -> failure x
  PrgBd progstmts -> failure x
transFun_body :: Fun_body -> Result
transFun_body x = case x of
  FunBdy progstmts expr -> failure x
  FunBd progstmts expr -> failure x
transProg_stmts :: Prog_stmts -> Result
transProg_stmts x = case x of
  PrgStm progstmt progstmts -> failure x
  PrgSt -> failure x
transProg_stmt :: Prog_stmt -> Result
transProg_stmt x = case x of
  ProgIf expr progstmt1 progstmt2 -> failure x
  ProgWh expr progstmt -> failure x
  ProgRd location -> failure x
  ProgAs location expr -> failure x
  ProgPt expr -> failure x
  ProgBl block -> failure x
  ProgCs expr caselist -> failure x
transLocation :: Location -> Result
transLocation x = case x of
  Loca id arraydimensions -> failure x
transCase_list :: Case_list -> Result
transCase_list x = case x of
  CseLst case_ morecase -> failure x
transMore_case :: More_case -> Result
transMore_case x = case x of
  MrCase case_ morecase -> failure x
  MrCasN -> failure x
transCase :: Case -> Result
transCase x = case x of
  Cas cid varlist progstmt -> failure x
transVar_list :: Var_list -> Result
transVar_list x = case x of
  VarLst varlist -> failure x
  VarLstN -> failure x
  VarLst1 id morevarlist -> failure x
transMore_var_list :: More_var_list -> Result
transMore_var_list x = case x of
  MVrLst id morevarlist -> failure x
  MVrLtN -> failure x
transExpr :: Expr -> Result
transExpr x = case x of
  ExprE expr bintterm -> failure x
  ExprB bintterm -> failure x
transBint_term :: Bint_term -> Result
transBint_term x = case x of
  BIntTrm bintterm bintfactor -> failure x
  BIntTmF bintfactor -> failure x
transBint_factor :: Bint_factor -> Result
transBint_factor x = case x of
  BIntFac bintfactor -> failure x
  BIntFCm intexpr1 compareop intexpr2 -> failure x
  BIntFcI intexpr -> failure x
transCompare_op :: Compare_op -> Result
transCompare_op x = case x of
  CmpOpEq -> failure x
  CmpOpLT -> failure x
  CmpOpGT -> failure x
  CmpOpLE -> failure x
  CmpOpGE -> failure x
transInt_expr :: Int_expr -> Result
transInt_expr x = case x of
  IntExpE intexpr addop intterm -> failure x
  IntExpT intterm -> failure x
transAddop :: Addop -> Result
transAddop x = case x of
  AddOp -> failure x
  SubOp -> failure x
transInt_term :: Int_term -> Result
transInt_term x = case x of
  IntTrmT intterm mulop intfactor -> failure x
  IntTrmF intfactor -> failure x
transMulop :: Mulop -> Result
transMulop x = case x of
  MulOp -> failure x
  DivOp -> failure x
transInt_factor :: Int_factor -> Result
transInt_factor x = case x of
  ItFcLPr expr -> failure x
  ItFcSiz id basicarraydimensions -> failure x
  ItFcFlt expr -> failure x
  ItFcFlr expr -> failure x
  ItFcCil expr -> failure x
  ItFcID id modifierlist -> failure x
  ItFcCID consargumentlist -> failure x
  ItFcIVl integer -> failure x
  ItFcRVl double -> failure x
  ItFcBVT -> failure x
  ItFcBVF -> failure x
  ItFcCVl char -> failure x
  ItFcSub intfactor -> failure x
transModifier_list :: Modifier_list -> Result
transModifier_list x = case x of
  ModLstF funargumentlist -> failure x
  ModLstA arraydimensions -> failure x
transFun_argument_list :: Fun_argument_list -> Result
transFun_argument_list x = case x of
  FArgLst arguments -> failure x
transCons_argument_list :: Cons_argument_list -> Result
transCons_argument_list x = case x of
  CAgLstF funargumentlist -> failure x
  CAgLstN -> failure x
transArguments :: Arguments -> Result
transArguments x = case x of
  Args expr morearguments -> failure x
  ArgsN -> failure x
transMore_arguments :: More_arguments -> Result
transMore_arguments x = case x of
  MArgs expr morearguments -> failure x
  MArgsN -> failure x

