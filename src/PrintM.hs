{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module PrintM where

-- pretty-printer generated by the BNF converter

import AbsM
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)



instance Print CID where
  prt _ (CID i) = doc (showString ( i))


instance Print ID where
  prt _ (ID i) = doc (showString ( i))



instance Print Prog where
  prt i e = case e of
    Prg block -> prPrec i 0 (concatD [prt 0 block])

instance Print Block where
  prt i e = case e of
    Blok declarations programbody -> prPrec i 0 (concatD [prt 0 declarations, prt 0 programbody])

instance Print Declarations where
  prt i e = case e of
    Dec declaration declarations -> prPrec i 0 (concatD [prt 0 declaration, doc (showString ";"), prt 0 declarations])
    DecN -> prPrec i 0 (concatD [])

instance Print Declaration where
  prt i e = case e of
    DecV vardeclaration -> prPrec i 0 (concatD [prt 0 vardeclaration])
    DecF fundeclaration -> prPrec i 0 (concatD [prt 0 fundeclaration])
    DecD datadeclaration -> prPrec i 0 (concatD [prt 0 datadeclaration])

instance Print Var_declaration where
  prt i e = case e of
    VarD varspecs type_ -> prPrec i 0 (concatD [doc (showString "var"), prt 0 varspecs, doc (showString ":"), prt 0 type_])

instance Print Var_specs where
  prt i e = case e of
    VarS varspec morevarspecs -> prPrec i 0 (concatD [prt 0 varspec, prt 0 morevarspecs])

instance Print More_var_specs where
  prt i e = case e of
    MVarS varspec morevarspecs -> prPrec i 0 (concatD [doc (showString ","), prt 0 varspec, prt 0 morevarspecs])
    MVar -> prPrec i 0 (concatD [])

instance Print Var_spec where
  prt i e = case e of
    VarSp arraydimensions -> prPrec i 0 (concatD [prt 0 arraydimensions])

instance Print Array_dimensions where
  prt i e = case e of
    ArrDi expr arraydimensions -> prPrec i 0 (concatD [doc (showString "["), prt 0 expr, doc (showString "]"), prt 0 arraydimensions])
    ArrD -> prPrec i 0 (concatD [])

instance Print Type where
  prt i e = case e of
    TInt -> prPrec i 0 (concatD [doc (showString "int")])
    TRea -> prPrec i 0 (concatD [doc (showString "real")])
    TBoo -> prPrec i 0 (concatD [doc (showString "bool")])
    TCha -> prPrec i 0 (concatD [doc (showString "char")])
    Tid id -> prPrec i 0 (concatD [prt 0 id])

instance Print Fun_declaration where
  prt i e = case e of
    FunD id paramlist type_ funblock -> prPrec i 0 (concatD [doc (showString "fun"), prt 0 id, prt 0 paramlist, doc (showString ":"), prt 0 type_, doc (showString "{"), prt 0 funblock, doc (showString "}")])

instance Print Fun_block where
  prt i e = case e of
    FunB declarations funbody -> prPrec i 0 (concatD [prt 0 declarations, prt 0 funbody])

instance Print Param_list where
  prt i e = case e of
    ParL parameters -> prPrec i 0 (concatD [doc (showString "("), prt 0 parameters, doc (showString ")")])

instance Print Parameters where
  prt i e = case e of
    Para basicdeclaration moreparameters -> prPrec i 0 (concatD [prt 0 basicdeclaration, prt 0 moreparameters])
    ParaN -> prPrec i 0 (concatD [])

instance Print More_parameters where
  prt i e = case e of
    MPar basicdeclaration moreparameters -> prPrec i 0 (concatD [doc (showString ","), prt 0 basicdeclaration, prt 0 moreparameters])
    MParN -> prPrec i 0 (concatD [])

instance Print Basic_declaration where
  prt i e = case e of
    BDec id basicarraydimensions type_ -> prPrec i 0 (concatD [prt 0 id, prt 0 basicarraydimensions, doc (showString ":"), prt 0 type_])

instance Print Basic_array_dimensions where
  prt i e = case e of
    BArrD basicarraydimensions -> prPrec i 0 (concatD [doc (showString "["), doc (showString "]"), prt 0 basicarraydimensions])
    BArrN -> prPrec i 0 (concatD [])

instance Print Data_declaration where
  prt i e = case e of
    DatDec id consdeclarations -> prPrec i 0 (concatD [doc (showString "data"), prt 0 id, doc (showString ":="), prt 0 consdeclarations])

instance Print Cons_declarations where
  prt i e = case e of
    ConDec consdecl moreconsdecl -> prPrec i 0 (concatD [prt 0 consdecl, prt 0 moreconsdecl])

instance Print More_cons_decl where
  prt i e = case e of
    MConDc consdecl moreconsdecl -> prPrec i 0 (concatD [doc (showString "|"), prt 0 consdecl, prt 0 moreconsdecl])
    MConNl -> prPrec i 0 (concatD [])

instance Print Cons_decl where
  prt i e = case e of
    CnDecl cid typelist -> prPrec i 0 (concatD [prt 0 cid, doc (showString "of"), prt 0 typelist])
    CnDec cid -> prPrec i 0 (concatD [prt 0 cid])

instance Print Type_list where
  prt i e = case e of
    TpeLst type_ moretype -> prPrec i 0 (concatD [prt 0 type_, prt 0 moretype])

instance Print More_type where
  prt i e = case e of
    MreTyp type_ moretype -> prPrec i 0 (concatD [doc (showString "*"), prt 0 type_, prt 0 moretype])
    MrTypN -> prPrec i 0 (concatD [])

instance Print Program_body where
  prt i e = case e of
    PrgBdy progstmts -> prPrec i 0 (concatD [doc (showString "begin"), prt 0 progstmts, doc (showString "end")])
    PrgBd progstmts -> prPrec i 0 (concatD [prt 0 progstmts])

instance Print Fun_body where
  prt i e = case e of
    FunBdy progstmts expr -> prPrec i 0 (concatD [doc (showString "begin"), prt 0 progstmts, doc (showString "return"), prt 0 expr, doc (showString ";"), doc (showString "end")])
    FunBd progstmts expr -> prPrec i 0 (concatD [prt 0 progstmts, doc (showString "return"), prt 0 expr, doc (showString ";")])

instance Print Prog_stmts where
  prt i e = case e of
    PrgStm progstmt progstmts -> prPrec i 0 (concatD [prt 0 progstmt, doc (showString ";"), prt 0 progstmts])
    PrgSt -> prPrec i 0 (concatD [])

instance Print Prog_stmt where
  prt i e = case e of
    ProgIf expr progstmt1 progstmt2 -> prPrec i 0 (concatD [doc (showString "if"), prt 0 expr, doc (showString "then"), prt 0 progstmt1, doc (showString "else"), prt 0 progstmt2])
    ProgWh expr progstmt -> prPrec i 0 (concatD [doc (showString "while"), prt 0 expr, doc (showString "do"), prt 0 progstmt])
    ProgRd location -> prPrec i 0 (concatD [doc (showString "read"), prt 0 location])
    ProgAs location expr -> prPrec i 0 (concatD [prt 0 location, doc (showString ":="), prt 0 expr])
    ProgPt expr -> prPrec i 0 (concatD [doc (showString "print"), prt 0 expr])
    ProgBl block -> prPrec i 0 (concatD [doc (showString "{"), prt 0 block, doc (showString "}")])
    ProgCs expr caselist -> prPrec i 0 (concatD [doc (showString "case"), prt 0 expr, doc (showString "of"), doc (showString "{"), prt 0 caselist, doc (showString "}")])

instance Print Location where
  prt i e = case e of
    Loca id arraydimensions -> prPrec i 0 (concatD [prt 0 id, prt 0 arraydimensions])

instance Print Case_list where
  prt i e = case e of
    CseLst case_ morecase -> prPrec i 0 (concatD [prt 0 case_, prt 0 morecase])

instance Print More_case where
  prt i e = case e of
    MrCase case_ morecase -> prPrec i 0 (concatD [doc (showString "|"), prt 0 case_, prt 0 morecase])
    MrCasN -> prPrec i 0 (concatD [])

instance Print Case where
  prt i e = case e of
    Cas cid varlist progstmt -> prPrec i 0 (concatD [prt 0 cid, prt 0 varlist, doc (showString "=>"), prt 0 progstmt])

instance Print Var_list where
  prt i e = case e of
    VarLst varlist -> prPrec i 0 (concatD [doc (showString "("), prt 1 varlist, doc (showString ")")])
    VarLstN -> prPrec i 0 (concatD [])
    VarLst1 id morevarlist -> prPrec i 1 (concatD [prt 0 id, prt 0 morevarlist])

instance Print More_var_list where
  prt i e = case e of
    MVrLst id morevarlist -> prPrec i 0 (concatD [doc (showString ","), prt 0 id, prt 0 morevarlist])
    MVrLtN -> prPrec i 0 (concatD [])

instance Print Expr where
  prt i e = case e of
    ExprE expr bintterm -> prPrec i 0 (concatD [prt 0 expr, doc (showString "||"), prt 0 bintterm])
    ExprB bintterm -> prPrec i 0 (concatD [prt 0 bintterm])

instance Print Bint_term where
  prt i e = case e of
    BIntTrm bintterm bintfactor -> prPrec i 0 (concatD [prt 0 bintterm, doc (showString "&&"), prt 0 bintfactor])
    BIntTmF bintfactor -> prPrec i 0 (concatD [prt 0 bintfactor])

instance Print Bint_factor where
  prt i e = case e of
    BIntFac bintfactor -> prPrec i 0 (concatD [doc (showString "not"), prt 0 bintfactor])
    BIntFCm intexpr1 compareop intexpr2 -> prPrec i 0 (concatD [prt 0 intexpr1, prt 0 compareop, prt 0 intexpr2])
    BIntFcI intexpr -> prPrec i 0 (concatD [prt 0 intexpr])

instance Print Compare_op where
  prt i e = case e of
    CmpOpEq -> prPrec i 0 (concatD [doc (showString "=")])
    CmpOpLT -> prPrec i 0 (concatD [doc (showString "<")])
    CmpOpGT -> prPrec i 0 (concatD [doc (showString ">")])
    CmpOpLE -> prPrec i 0 (concatD [doc (showString "=<")])
    CmpOpGE -> prPrec i 0 (concatD [doc (showString ">=")])

instance Print Int_expr where
  prt i e = case e of
    IntExpE intexpr addop intterm -> prPrec i 0 (concatD [prt 0 intexpr, prt 0 addop, prt 0 intterm])
    IntExpT intterm -> prPrec i 0 (concatD [prt 0 intterm])

instance Print Addop where
  prt i e = case e of
    AddOp -> prPrec i 0 (concatD [doc (showString "+")])
    SubOp -> prPrec i 0 (concatD [doc (showString "-")])

instance Print Int_term where
  prt i e = case e of
    IntTrmT intterm mulop intfactor -> prPrec i 0 (concatD [prt 0 intterm, prt 0 mulop, prt 0 intfactor])
    IntTrmF intfactor -> prPrec i 0 (concatD [prt 0 intfactor])

instance Print Mulop where
  prt i e = case e of
    MulOp -> prPrec i 0 (concatD [doc (showString "*")])
    DivOp -> prPrec i 0 (concatD [doc (showString "/")])

instance Print Int_factor where
  prt i e = case e of
    ItFcLPr expr -> prPrec i 0 (concatD [doc (showString "("), prt 0 expr, doc (showString ")")])
    ItFcSiz id basicarraydimensions -> prPrec i 0 (concatD [doc (showString "size"), doc (showString "("), prt 0 id, prt 0 basicarraydimensions, doc (showString ")")])
    ItFcFlt expr -> prPrec i 0 (concatD [doc (showString "float"), doc (showString "("), prt 0 expr, doc (showString ")")])
    ItFcFlr expr -> prPrec i 0 (concatD [doc (showString "floor"), doc (showString "("), prt 0 expr, doc (showString ")")])
    ItFcCil expr -> prPrec i 0 (concatD [doc (showString "ceil"), doc (showString "("), prt 0 expr, doc (showString ")")])
    ItFcID id modifierlist -> prPrec i 0 (concatD [prt 0 id, prt 0 modifierlist])
    ItFcCID consargumentlist -> prPrec i 0 (concatD [prt 0 consargumentlist])
    ItFcIVl n -> prPrec i 0 (concatD [prt 0 n])
    ItFcRVl d -> prPrec i 0 (concatD [prt 0 d])
    ItFcBVT -> prPrec i 0 (concatD [doc (showString "true")])
    ItFcBVF -> prPrec i 0 (concatD [doc (showString "false")])
    ItFcCVl c -> prPrec i 0 (concatD [prt 0 c])
    ItFcSub intfactor -> prPrec i 0 (concatD [doc (showString "-"), prt 0 intfactor])

instance Print Modifier_list where
  prt i e = case e of
    ModLstF funargumentlist -> prPrec i 0 (concatD [prt 0 funargumentlist])
    ModLstA arraydimensions -> prPrec i 0 (concatD [prt 0 arraydimensions])

instance Print Fun_argument_list where
  prt i e = case e of
    FArgLst arguments -> prPrec i 0 (concatD [doc (showString "("), prt 0 arguments, doc (showString ")")])

instance Print Cons_argument_list where
  prt i e = case e of
    CAgLstF funargumentlist -> prPrec i 0 (concatD [prt 0 funargumentlist])
    CAgLstN -> prPrec i 0 (concatD [])

instance Print Arguments where
  prt i e = case e of
    Args expr morearguments -> prPrec i 0 (concatD [prt 0 expr, prt 0 morearguments])
    ArgsN -> prPrec i 0 (concatD [])

instance Print More_arguments where
  prt i e = case e of
    MArgs expr morearguments -> prPrec i 0 (concatD [doc (showString ","), prt 0 expr, prt 0 morearguments])
    MArgsN -> prPrec i 0 (concatD [])


