module SkelM where

-- Haskell module generated by the BNF converter

import AbsM
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transCID :: CID -> Result
transCID x = case x of
  CID string -> failure x
transID :: ID -> Result
transID x = case x of
  ID string -> failure x
transProg :: Prog -> Result
transProg x = case x of
  ProgBlock block -> failure x
transBlock :: Block -> Result
transBlock x = case x of
  Block1 declarations programbody -> failure x
transDeclarations :: Declarations -> Result
transDeclarations x = case x of
  Declarations1 declaration declarations -> failure x
  Declarations2 -> failure x
transDeclaration :: Declaration -> Result
transDeclaration x = case x of
  DeclarationVar_declaration vardeclaration -> failure x
  DeclarationFun_declaration fundeclaration -> failure x
  DeclarationData_declaration datadeclaration -> failure x
transVar_declaration :: Var_declaration -> Result
transVar_declaration x = case x of
  Var_declaration1 varspecs type_ -> failure x
transVar_specs :: Var_specs -> Result
transVar_specs x = case x of
  Var_specs1 varspec morevarspecs -> failure x
transMore_var_specs :: More_var_specs -> Result
transMore_var_specs x = case x of
  More_var_specs1 varspec morevarspecs -> failure x
  More_var_specs2 -> failure x
transVar_spec :: Var_spec -> Result
transVar_spec x = case x of
  Var_specArray_dimensions arraydimensions -> failure x
transArray_dimensions :: Array_dimensions -> Result
transArray_dimensions x = case x of
  Array_dimensions1 expr arraydimensions -> failure x
  Array_dimensions2 -> failure x
transType :: Type -> Result
transType x = case x of
  Type_int -> failure x
  Type_real -> failure x
  Type_bool -> failure x
  Type_char -> failure x
  TypeID id -> failure x
transFun_declaration :: Fun_declaration -> Result
transFun_declaration x = case x of
  Fun_declaration1 id paramlist type_ funblock -> failure x
transFun_block :: Fun_block -> Result
transFun_block x = case x of
  Fun_block1 declarations funbody -> failure x
transParam_list :: Param_list -> Result
transParam_list x = case x of
  Param_list1 parameters -> failure x
transParameters :: Parameters -> Result
transParameters x = case x of
  Parameters1 basicdeclaration moreparameters -> failure x
  Parameters2 -> failure x
transMore_parameters :: More_parameters -> Result
transMore_parameters x = case x of
  More_parameters1 basicdeclaration moreparameters -> failure x
  More_parameters2 -> failure x
transBasic_declaration :: Basic_declaration -> Result
transBasic_declaration x = case x of
  Basic_declaration1 id basicarraydimensions type_ -> failure x
transBasic_array_dimensions :: Basic_array_dimensions -> Result
transBasic_array_dimensions x = case x of
  Basic_array_dimensions1 basicarraydimensions -> failure x
  Basic_array_dimensions2 -> failure x
transData_declaration :: Data_declaration -> Result
transData_declaration x = case x of
  Data_declaration1 id consdeclarations -> failure x
transCons_declarations :: Cons_declarations -> Result
transCons_declarations x = case x of
  Cons_declarations1 consdecl moreconsdecl -> failure x
transMore_cons_decl :: More_cons_decl -> Result
transMore_cons_decl x = case x of
  More_cons_decl1 consdecl moreconsdecl -> failure x
  More_cons_decl2 -> failure x
transCons_decl :: Cons_decl -> Result
transCons_decl x = case x of
  Cons_decl1 cid typelist -> failure x
  Cons_declCID cid -> failure x
transType_list :: Type_list -> Result
transType_list x = case x of
  Type_list1 type_ moretype -> failure x
transMore_type :: More_type -> Result
transMore_type x = case x of
  More_type1 type_ moretype -> failure x
  More_type2 -> failure x
transProgram_body :: Program_body -> Result
transProgram_body x = case x of
  Program_body1 progstmts -> failure x
  Program_bodyProg_stmts progstmts -> failure x
transFun_body :: Fun_body -> Result
transFun_body x = case x of
  Fun_body1 progstmts expr -> failure x
  Fun_body2 progstmts expr -> failure x
transProg_stmts :: Prog_stmts -> Result
transProg_stmts x = case x of
  Prog_stmts1 progstmt progstmts -> failure x
  Prog_stmts2 -> failure x
transProg_stmt :: Prog_stmt -> Result
transProg_stmt x = case x of
  Prog_stmt1 expr progstmt1 progstmt2 -> failure x
  Prog_stmt2 expr progstmt -> failure x
  Prog_stmt3 location -> failure x
  Prog_stmt4 location expr -> failure x
  Prog_stmt5 expr -> failure x
  Prog_stmt6 block -> failure x
  Prog_stmt7 expr caselist -> failure x
transLocation :: Location -> Result
transLocation x = case x of
  Location1 id arraydimensions -> failure x
transCase_list :: Case_list -> Result
transCase_list x = case x of
  Case_list1 case_ morecase -> failure x
transMore_case :: More_case -> Result
transMore_case x = case x of
  More_case1 case_ morecase -> failure x
  More_case2 -> failure x
transCase :: Case -> Result
transCase x = case x of
  Case1 cid varlist progstmt -> failure x
transVar_list :: Var_list -> Result
transVar_list x = case x of
  Var_list1 varlist -> failure x
  Var_list2 -> failure x
  Var_list11 id morevarlist -> failure x
transMore_var_list :: More_var_list -> Result
transMore_var_list x = case x of
  More_var_list1 id morevarlist -> failure x
  More_var_list2 -> failure x
transExpr :: Expr -> Result
transExpr x = case x of
  Expr1 expr bintterm -> failure x
  ExprBint_term bintterm -> failure x
transBint_term :: Bint_term -> Result
transBint_term x = case x of
  Bint_term1 bintterm bintfactor -> failure x
  Bint_termBint_factor bintfactor -> failure x
transBint_factor :: Bint_factor -> Result
transBint_factor x = case x of
  Bint_factor1 bintfactor -> failure x
  Bint_factor2 intexpr1 compareop intexpr2 -> failure x
  Bint_factorInt_expr intexpr -> failure x
transCompare_op :: Compare_op -> Result
transCompare_op x = case x of
  Compare_op1 -> failure x
  Compare_op2 -> failure x
  Compare_op3 -> failure x
  Compare_op4 -> failure x
  Compare_op5 -> failure x
transInt_expr :: Int_expr -> Result
transInt_expr x = case x of
  Int_expr1 intexpr addop intterm -> failure x
  Int_exprInt_term intterm -> failure x
transAddop :: Addop -> Result
transAddop x = case x of
  Addop1 -> failure x
  Addop2 -> failure x
transInt_term :: Int_term -> Result
transInt_term x = case x of
  Int_term1 intterm mulop intfactor -> failure x
  Int_termInt_factor intfactor -> failure x
transMulop :: Mulop -> Result
transMulop x = case x of
  Mulop1 -> failure x
  Mulop2 -> failure x
transInt_factor :: Int_factor -> Result
transInt_factor x = case x of
  Int_factor1 expr -> failure x
  Int_factor2 id basicarraydimensions -> failure x
  Int_factor3 expr -> failure x
  Int_factor4 expr -> failure x
  Int_factor5 expr -> failure x
  Int_factor6 id modifierlist -> failure x
  Int_factorCons_argument_list consargumentlist -> failure x
  Int_factorInteger integer -> failure x
  Int_factorDouble double -> failure x
  Int_factor_true -> failure x
  Int_factor_false -> failure x
  Int_factorChar char -> failure x
  Int_factor7 intfactor -> failure x
transModifier_list :: Modifier_list -> Result
transModifier_list x = case x of
  Modifier_listFun_argument_list funargumentlist -> failure x
  Modifier_listArray_dimensions arraydimensions -> failure x
transFun_argument_list :: Fun_argument_list -> Result
transFun_argument_list x = case x of
  Fun_argument_list1 arguments -> failure x
transCons_argument_list :: Cons_argument_list -> Result
transCons_argument_list x = case x of
  Cons_argument_listFun_argument_list funargumentlist -> failure x
  Cons_argument_list1 -> failure x
transArguments :: Arguments -> Result
transArguments x = case x of
  Arguments1 expr morearguments -> failure x
  Arguments2 -> failure x
transMore_arguments :: More_arguments -> Result
transMore_arguments x = case x of
  More_arguments1 expr morearguments -> failure x
  More_arguments2 -> failure x

