

module AbsM where

-- Haskell module generated by the BNF converter




newtype ID = ID String deriving (Eq, Ord, Show, Read)
newtype IVAL = IVAL String deriving (Eq, Ord, Show, Read)
newtype BVAL = BVAL String deriving (Eq, Ord, Show, Read)
data Prog = ProgBlock Block
  deriving (Eq, Ord, Show, Read)

data Block = Block1 Declarations Program_body
  deriving (Eq, Ord, Show, Read)

data Declarations
    = Declarations1 Declaration Declarations | Declarations2
  deriving (Eq, Ord, Show, Read)

data Declaration
    = DeclarationVar_declaration Var_declaration
    | DeclarationFun_declaration Fun_declaration
  deriving (Eq, Ord, Show, Read)

data Var_declaration = Var_declaration1 Basic_var_declaration
  deriving (Eq, Ord, Show, Read)

data Basic_var_declaration = Basic_var_declaration1 Identifier Type
  deriving (Eq, Ord, Show, Read)

data Fun_declaration
    = Fun_declaration1 Identifier Param_list Type Fun_block
  deriving (Eq, Ord, Show, Read)

data Fun_block = Fun_block1 Declarations Fun_body
  deriving (Eq, Ord, Show, Read)

data Param_list = Param_list1 Parameters
  deriving (Eq, Ord, Show, Read)

data Parameters
    = ParametersParameters1 Parameters
    | Parameters1
    | Parameters11 Parameters Basic_var_declaration
    | Parameters1Basic_var_declaration Basic_var_declaration
  deriving (Eq, Ord, Show, Read)

data Identifier = IdentifierID ID
  deriving (Eq, Ord, Show, Read)

data Type = Type_int | Type_bool
  deriving (Eq, Ord, Show, Read)

data Program_body = Program_body1 Prog_stmts
  deriving (Eq, Ord, Show, Read)

data Fun_body = Fun_body1 Prog_stmts Expr
  deriving (Eq, Ord, Show, Read)

data Prog_stmts = Prog_stmts1 Prog_stmt Prog_stmts | Prog_stmts2
  deriving (Eq, Ord, Show, Read)

data Prog_stmt
    = Prog_stmt1 Expr Prog_stmt Prog_stmt
    | Prog_stmt2 Expr Prog_stmt
    | Prog_stmt3 ID
    | Prog_stmt4 ID Expr
    | Prog_stmt5 Expr
    | Prog_stmt6 Block
  deriving (Eq, Ord, Show, Read)

data Expr = Expr1 Expr Bint_term | ExprBint_term Bint_term
  deriving (Eq, Ord, Show, Read)

data Bint_term
    = Bint_term1 Bint_term Bint_factor
    | Bint_termBint_factor Bint_factor
  deriving (Eq, Ord, Show, Read)

data Bint_factor
    = Bint_factor1 Bint_factor
    | Bint_factor2 Int_expr Compare_op Int_expr
    | Bint_factorInt_expr Int_expr
  deriving (Eq, Ord, Show, Read)

data Compare_op
    = Compare_op1
    | Compare_op2
    | Compare_op3
    | Compare_op4
    | Compare_op5
  deriving (Eq, Ord, Show, Read)

data Int_expr
    = Int_expr1 Int_expr Addop Int_term | Int_exprInt_term Int_term
  deriving (Eq, Ord, Show, Read)

data Addop = Addop1 | Addop2
  deriving (Eq, Ord, Show, Read)

data Int_term
    = Int_term1 Int_term Mulop Int_factor
    | Int_termInt_factor Int_factor
  deriving (Eq, Ord, Show, Read)

data Mulop = Mulop1 | Mulop2
  deriving (Eq, Ord, Show, Read)

data Int_factor
    = Int_factor1 Expr
    | Int_factor2 ID Argument_list
    | Int_factorIVAL IVAL
    | Int_factorBVAL BVAL
    | Int_factor3 Int_factor
  deriving (Eq, Ord, Show, Read)

data Argument_list = Argument_list1 Arguments | Argument_list2
  deriving (Eq, Ord, Show, Read)

data Arguments
    = ArgumentsArguments1 Arguments
    | Arguments1
    | Arguments11 Arguments Expr
    | Arguments1Expr Expr
  deriving (Eq, Ord, Show, Read)

