

module AbsM where

-- Haskell module generated by the BNF converter




newtype CID = CID String deriving (Eq, Ord, Show, Read)
newtype ID = ID String deriving (Eq, Ord, Show, Read)
data Prog = Prg Block
  deriving (Eq, Ord, Show, Read)

data Block = Blok Declarations Program_body
  deriving (Eq, Ord, Show, Read)

data Declarations = Dec Declaration Declarations | DecN
  deriving (Eq, Ord, Show, Read)

data Declaration
    = DecV Var_declaration
    | DecF Fun_declaration
    | DecD Data_declaration
  deriving (Eq, Ord, Show, Read)

data Var_declaration = VarD Var_specs Type
  deriving (Eq, Ord, Show, Read)

data Var_specs = VarS Var_spec More_var_specs
  deriving (Eq, Ord, Show, Read)

data More_var_specs = MVarS Var_spec More_var_specs | MVar
  deriving (Eq, Ord, Show, Read)

data Var_spec = VarSp Array_dimensions
  deriving (Eq, Ord, Show, Read)

data Array_dimensions = ArrDi Expr Array_dimensions | ArrD
  deriving (Eq, Ord, Show, Read)

data Type = TInt | TRea | TBoo | TCha | Tid ID
  deriving (Eq, Ord, Show, Read)

data Fun_declaration = FunD ID Param_list Type Fun_block
  deriving (Eq, Ord, Show, Read)

data Fun_block = FunB Declarations Fun_body
  deriving (Eq, Ord, Show, Read)

data Param_list = ParL Parameters
  deriving (Eq, Ord, Show, Read)

data Parameters = Para Basic_declaration More_parameters | ParaN
  deriving (Eq, Ord, Show, Read)

data More_parameters
    = MPar Basic_declaration More_parameters | MParN
  deriving (Eq, Ord, Show, Read)

data Basic_declaration = BDec ID Basic_array_dimensions Type
  deriving (Eq, Ord, Show, Read)

data Basic_array_dimensions = BArrD Basic_array_dimensions | BArrN
  deriving (Eq, Ord, Show, Read)

data Data_declaration = DatDec ID Cons_declarations
  deriving (Eq, Ord, Show, Read)

data Cons_declarations = ConDec Cons_decl More_cons_decl
  deriving (Eq, Ord, Show, Read)

data More_cons_decl = MConDc Cons_decl More_cons_decl | MConNl
  deriving (Eq, Ord, Show, Read)

data Cons_decl = CnDecl CID Type_list | CnDec CID
  deriving (Eq, Ord, Show, Read)

data Type_list = TpeLst Type More_type
  deriving (Eq, Ord, Show, Read)

data More_type = MreTyp Type More_type | MrTypN
  deriving (Eq, Ord, Show, Read)

data Program_body = PrgBdy Prog_stmts | PrgBd Prog_stmts
  deriving (Eq, Ord, Show, Read)

data Fun_body = FunBdy Prog_stmts Expr | FunBd Prog_stmts Expr
  deriving (Eq, Ord, Show, Read)

data Prog_stmts = PrgStm Prog_stmt Prog_stmts | PrgSt
  deriving (Eq, Ord, Show, Read)

data Prog_stmt
    = ProgIf Expr Prog_stmt Prog_stmt
    | ProgWh Expr Prog_stmt
    | ProgRd Location
    | ProgAs Location Expr
    | ProgPt Expr
    | ProgBl Block
    | ProgCs Expr Case_list
  deriving (Eq, Ord, Show, Read)

data Location = Loca ID Array_dimensions
  deriving (Eq, Ord, Show, Read)

data Case_list = CseLst Case More_case
  deriving (Eq, Ord, Show, Read)

data More_case = MrCase Case More_case | MrCasN
  deriving (Eq, Ord, Show, Read)

data Case = Cas CID Var_list Prog_stmt
  deriving (Eq, Ord, Show, Read)

data Var_list
    = VarLst Var_list | VarLstN | VarLst1 ID More_var_list
  deriving (Eq, Ord, Show, Read)

data More_var_list = MVrLst ID More_var_list | MVrLtN
  deriving (Eq, Ord, Show, Read)

data Expr = ExprE Expr Bint_term | ExprB Bint_term
  deriving (Eq, Ord, Show, Read)

data Bint_term
    = BIntTrm Bint_term Bint_factor | BIntTmF Bint_factor
  deriving (Eq, Ord, Show, Read)

data Bint_factor
    = BIntFac Bint_factor
    | BIntFCm Int_expr Compare_op Int_expr
    | BIntFcI Int_expr
  deriving (Eq, Ord, Show, Read)

data Compare_op = CmpOpEq | CmpOpLT | CmpOpGT | CmpOpLE | CmpOpGE
  deriving (Eq, Ord, Show, Read)

data Int_expr = IntExpE Int_expr Addop Int_term | IntExpT Int_term
  deriving (Eq, Ord, Show, Read)

data Addop = AddOp | SubOp
  deriving (Eq, Ord, Show, Read)

data Int_term
    = IntTrmT Int_term Mulop Int_factor | IntTrmF Int_factor
  deriving (Eq, Ord, Show, Read)

data Mulop = MulOp | DivOp
  deriving (Eq, Ord, Show, Read)

data Int_factor
    = ItFcLPr Expr
    | ItFcSiz ID Basic_array_dimensions
    | ItFcFlt Expr
    | ItFcFlr Expr
    | ItFcCil Expr
    | ItFcID ID Modifier_list
    | ItFcCID Cons_argument_list
    | ItFcIVl Integer
    | ItFcRVl Double
    | ItFcBVT
    | ItFcBVF
    | ItFcCVl Char
    | ItFcSub Int_factor
  deriving (Eq, Ord, Show, Read)

data Modifier_list
    = ModLstF Fun_argument_list | ModLstA Array_dimensions
  deriving (Eq, Ord, Show, Read)

data Fun_argument_list = FArgLst Arguments
  deriving (Eq, Ord, Show, Read)

data Cons_argument_list = CAgLstF Fun_argument_list | CAgLstN
  deriving (Eq, Ord, Show, Read)

data Arguments = Args Expr More_arguments | ArgsN
  deriving (Eq, Ord, Show, Read)

data More_arguments = MArgs Expr More_arguments | MArgsN
  deriving (Eq, Ord, Show, Read)

