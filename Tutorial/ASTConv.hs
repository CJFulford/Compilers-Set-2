module ASTConv where

-- Haskell module generated by the BNF converter

import AbsExpr
import qualified AST as A



transExpr :: Expr -> A.Expr 
transExpr x = case x of
  EAdd expr term -> A.Add (transExpr expr) (transTerm term) 
  ETerm term -> transTerm term 

transTerm :: Term -> A.Expr
transTerm x = case x of
  TMul term factor -> A.Mul (transTerm term) (transFactor factor)
  TFact factor -> transFactor factor

transFactor :: Factor -> A.Expr 
transFactor x = case x of
  SomeNum integer -> A.Num integer

